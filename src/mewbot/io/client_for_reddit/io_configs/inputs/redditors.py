"""
Redditor focussed input config - for watching redditors actions.
"""

from __future__ import annotations

from typing import List, Optional, Set, Type

import logging

import asyncpraw  # type: ignore
from mewbot.api.v1 import InputEvent

from mewbot.io.client_for_reddit.events import (
    USER_FOSCUSSED_INPUT_EVENTS,
    RedditUserCreatedSubredditSubmissionInputEvent,
)
from mewbot.io.client_for_reddit.io_configs.inputs.state import RedditState
from mewbot.io.client_for_reddit.io_configs.inputs.subreddit import RedditSubredditInput
from mewbot.io.client_for_reddit.io_configs.inputs.utils import GenericRedditTools


class RedditRedditorInput(RedditSubredditInput, GenericRedditTools):
    """
    Watches for events generated by a monitored list of redditors.
    """

    def __init__(
        self,
        praw_reddit: asyncpraw.Reddit,
        redditors: Optional[List[str]] = None,
        reddit_state: Optional[RedditState] = None,
    ) -> None:
        """
        Initialise the classe - reddit connection happens on the IOConfig level.

        :param praw_reddit: There can only be one asyncpraw instance so it needs to be
                            passed in
        :param redditors: A list of the redditors to watch. They might be up to something.
        :param reddit_state: Allows passing in an override stored state of reddit
        """
        redditors = redditors if redditors is not None else []

        self._logger = logging.getLogger(__name__ + ":" + type(self).__name__)

        # The users profile seem to act like a subreddit.
        # Monitoring them using the existing subreddit monitor
        super().__init__(
            praw_reddit=praw_reddit,
            subreddits=self.get_redditor_profile_names(redditors),
            reddit_state=reddit_state,
        )

        self._logger.info("Monitoring redditors - %s", self.reddit_state.target_redditors)

        self.reddit_state.target_redditors = redditors

        self.praw_reddit = praw_reddit

        self._loop = None

    @staticmethod
    def get_redditor_profile_names(redditors: List[str]) -> List[str]:
        """
        Profiles act like subreddits - but their name is "u_{redditor_name}".

        Take a list of redditors and output their profiles.
        :param redditors:
        :return:
        """
        return [f"u_{rn}" for rn in redditors]

    @staticmethod
    def produces_inputs() -> Set[Type[InputEvent]]:
        """
        Depending on the setup, this input could produce any of the above.

        This method produces redditor specific input events - events which could be best
        gathered by watching a reddit.
        :return:
        """
        return set(USER_FOSCUSSED_INPUT_EVENTS)

    @property
    def subreddits(self) -> List[str]:
        """
        Subredddits currently being watched.

        :return:
        """
        raise AttributeError("Subreddits cannot be directly got")

    @subreddits.setter
    def subreddits(self, values: List[str]) -> None:
        """
        Update the subreddits being watched.

        :param values:
        :return:
        """
        raise AttributeError("Subreddits cannot be directly set")

    @property
    def redditors(self) -> List[str]:
        """
        Redditors currently being watched.

        :return:
        """
        return self.reddit_state.target_redditors

    @redditors.setter
    def redditors(self, values: List[str]) -> None:
        """
        Update the redditors to watch - will only take effect if changed before startup.

        :param values:
        :return:
        """
        self.reddit_state.target_redditors = values

    async def run(self, profiles: bool = True) -> None:
        """
        Monitoring the activity of redditors.

        :return:
        """
        # Monitoring the redditor's profiles - which act like subreddits
        # Currently yielding the wrong type of events
        await super().run(profiles=profiles)

        for redditor in self.reddit_state.target_redditors:
            self.loop.create_task(self.monitor_redditor_comments(redditor))
            self.loop.create_task(self.monitor_redditor_submissions(redditor))

    # ----------------
    # MONITOR COMMENTS

    async def monitor_redditor_comments(self, target_redditor: str) -> None:
        """
        Monitor comments made by the target redditor.

        :param target_redditor:
        :return:
        """
        self.reddit_state.started_redditors.add(target_redditor)

        self._logger.info("Monitoring redditor '%s' for comments", target_redditor)

        redditor = await self.praw_reddit.redditor(name=target_redditor)

        async for comment in redditor.stream.comments():
            print("-------------")
            print(self.render_comment(comment, prefix="redditor"))
            print("-------------")
            await self.redditor_comment_to_event(reddit_comment=comment)

    async def redditor_comment_to_event(
        self, reddit_comment: asyncpraw.reddit.Comment
    ) -> None:
        """
        Transform a redditor comment to an event.

        :param redditor:
        :param reddit_comment:
        :return:
        """
        top_level = self.is_comment_top_level(reddit_comment)

        # "Detect" removed or deleted comments
        # a poor method, but the best that can be done atm
        # Note - there may be issues where this does not work for non-english language subreddits
        if reddit_comment.body == r"[removed]":
            # Per notes in reddit-dev-notes.md
            # Not sure if removed events are being broadcast by the API
            if reddit_comment.author == r"[deleted]":
                await self.process_redditor_removed_comment_on_submission(
                    reddit_comment, top_level
                )
                return

        if reddit_comment.body == r"[deleted]":
            await self.process_redditor_deleted_comment_on_submission(
                reddit_comment, top_level
            )

            return

        # Not sure if editing a comment produces a separate event in this result
        # Or if it just happens to change the status of the observed event to edited
        # Given this is intended to be the backend for a _display_ system - it probably
        # DOES NOT produce a separate event

        # Note - depending on the cache size events will start falling out of it
        # So it's fairly certain that we won't be able to provide the pre-edit content

        # If a comment has been edited, then it needs to go on the wire as an edited event
        if reddit_comment.edited:
            await self.process_redditor_edited_comment_on_submission(
                reddit_comment, top_level
            )

            return

        # If a message is not declared as edited, deleted or removed, just put it on the wire
        await self.process_redditor_created_comment_on_submission(reddit_comment, top_level)

    async def process_redditor_created_comment_on_submission(
        self, reddit_comment: asyncpraw.reddit.Comment, top_level: bool
    ) -> None:
        """
        A redditor has been detected making a comment on a submission.

        :param reddit_comment:
        :param top_level:
        :return:
        """
        await self.process_subreddit_created_comment_on_submission(
            subreddit=reddit_comment.subreddit,
            reddit_comment=reddit_comment,
            top_level=top_level,
        )

    async def process_redditor_edited_comment_on_submission(
        self, reddit_comment: asyncpraw.reddit.Comment, top_level: bool
    ) -> None:
        """
        Edits have been detected to a redditor's comment.

        :param reddit_comment:
        :param top_level:
        :return:
        """

        await self.process_subreddit_edited_comment_on_submission(
            subreddit=reddit_comment.subreddit,
            reddit_comment=reddit_comment,
            top_level=top_level,
        )

    async def process_redditor_deleted_comment_on_submission(
        self, reddit_comment: asyncpraw.reddit.Comment, top_level: bool
    ) -> None:
        """
        A redditor comment has been detected as being deleted.

        :param reddit_comment:
        :param top_level:
        :return:
        """
        await self.process_subreddit_deleted_comment_on_submission(
            subreddit=str(reddit_comment.subreddit),
            reddit_comment=reddit_comment,
            top_level=top_level,
        )

    async def process_redditor_removed_comment_on_submission(
        self, reddit_comment: asyncpraw.reddit.Comment, top_level: bool
    ) -> None:
        """
        A redditor comment has been detected as removed.

        :param reddit_comment:
        :param top_level: Is the comment to be processed top level
        :return:
        """
        await self.process_subreddit_removed_comment_on_submission(
            subreddit=reddit_comment.subreddit,
            reddit_comment=reddit_comment,
            top_level=top_level,
        )

    # ----------------
    # ---------------------
    # - MONITOR SUBMISSIONS

    async def monitor_redditor_submissions(self, target_redditor: str) -> None:
        """
        Monitor submission made by the target redditor.

        :param target_redditor:
        :return:
        """
        self.reddit_state.started_redditors.add(target_redditor)

        self._logger.info("Monitoring redditor '%s' for submissions", target_redditor)

        redditor = await self.praw_reddit.redditor(name=target_redditor)

        async for submission in redditor.stream.submissions():
            print("-------------")
            print(self.render_submission(submission, prefix="redditor"))
            print("-------------")
            await self.redditor_submission_to_event(reddit_submission=submission)

    async def redditor_submission_to_event(
        self, reddit_submission: asyncpraw.reddit.Submission
    ) -> None:
        """
        Takes a reddit submission and puts it on the wire as an event.

        :param redditor: In some edge cases we will need to know who the system thought posted
                         the content.
        :param reddit_submission: A submission
        :return:
        """
        # "Detect" removed or deleted comments - a poor method, but the best that can be done atm
        # Note - there may be issues where this does not work for non-english language subreddits
        if reddit_submission.selftext == r"[removed]":
            # Per notes in reddit-dev-notes.md
            # Not sure if removed events are being broadcast by the API
            if reddit_submission.author == r"[deleted]":
                await self.process_redditor_removed_submission_in_subreddit(reddit_submission)
                return

        if reddit_submission.selftext == r"[deleted]":
            await self.process_redditor_deleted_submission_in_subreddit(reddit_submission)
            return

        # Not sure if editing a submission produces a separate event in this stream
        # Or if it just happens to change the status of the observed event to edited
        # Given this is intended to be the backend for a _display_ system - it probably
        # DOES NOT produce a separate event

        # Note - depending on the cache size events will start falling out of it
        # So it's fairly certain that we won't be able to provide the pre-edit content

        # If a submission has been edited, then it needs to go on the wire as an edited event
        if reddit_submission.edited:
            await self.process_redditor_edited_submission_in_subreddit(reddit_submission)

            return

        # If a message is not declared as edited, deleted or removed, just put it on the wire
        await self.process_redditor_created_submission_in_subreddit(reddit_submission)

    async def process_redditor_created_submission_in_subreddit(
        self, reddit_submission: asyncpraw.reddit.Submission
    ) -> None:
        """
        A redditor is registered as having edited a submission.

        :param reddit_submission: The submission which is noted as having been edited
        :return:
        """
        submission_creation_input_event = RedditUserCreatedSubredditSubmissionInputEvent(
            user_id=str(reddit_submission.author),
            subreddit=reddit_submission.subreddit,
            author_str=str(reddit_submission.author),
            creation_timestamp=reddit_submission.created_utc,
            submission=reddit_submission,
            submission_content=reddit_submission.selftext,
            submission_id=reddit_submission.id,
            submission_image=reddit_submission.url,
            submission_title=reddit_submission.title,
        )

        await self.send(submission_creation_input_event)

    async def process_redditor_edited_submission_in_subreddit(
        self, reddit_submission: asyncpraw.reddit.Submission
    ) -> None:
        """
        A redditor is registered as having edited a submission.

        :param reddit_submission: The submission which is noted as having been edited
        :return:
        """
        await self.process_subreddit_edited_submission(
            reddit_submission=reddit_submission, subreddit=str(reddit_submission.subreddit)
        )

    async def process_redditor_deleted_submission_in_subreddit(
        self, reddit_submission: asyncpraw.reddit.Submission
    ) -> None:
        """
        A redditor is registered as having deleted a submission.

        It is probable that they are the one who deleted the submission. But not certain.
        In the case that the submission is deleted - not removed - we can read the redditor's name
        out of the subreddit.
        :param redditor: Under other circumstances we'd read the submitter out of the submission.
                         But we might not be able to do that if the submission is gone.
                         So providing it here, manually.
        :param reddit_submission: The submissio which is noted as having been removed
        :return:
        """
        await self.process_subreddit_deleted_submission(
            subreddit=str(reddit_submission.subreddit), reddit_submission=reddit_submission
        )

    async def process_redditor_removed_submission_in_subreddit(
        self, reddit_submission: asyncpraw.reddit.Submission
    ) -> None:
        """
        A redditor is registered as having removed a submission.

        Probably the actual case is that someone has removed the submission _for_ them.
        :param redditor: Under other circumstances we'd read the submitter out of the submission.
                         But we might not be able to do that if the submission is gone.
                         So providing it here, manually.
        :param reddit_submission: The submissio which is noted as having been removed
        :return:
        """
        await self.process_subreddit_removed_submission(
            subreddit=str(reddit_submission.subreddit), reddit_submission=reddit_submission
        )
